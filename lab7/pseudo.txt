in main the following:

for i in argv:
	create new myThread instance:
	threads[i]  = thread(argv,i);
	t[i].start();

for i in argv:
	t[i].join();

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

class myThread extends thread
{
	static int[] ops = [(a,b) -> { return a+b; },
						(a,b) -> {return a-b; },
						(a,b) -> {return a*b; },
						(a,b) -> {return a/b; }];
	static string[] s_ops = ["+", "-", "*", "/"];
	protected string[] mRem;
	public final string start;
	public final int target;
	
	public myThread(string[] args, int idx)
	{
		start = args[idx];
		mRem = new String[args.length-1];
		for(int j = 0; j < 6; j++)
			if(j != idx) 
				mRem[j] = args[j];	
	}
	public void run() 
	{ 
		recurse(start, int(start), 0); 
	}
	protected void recurse(string s_cur, int i_cur, int idx)
	{
		if(idx== mRem.length)
		{
			System.out.println(String.format("%s=%d%s", s_cur,target,((i_cur==target) ? "@" : ".")));
			return;
		}
		for(int i = 0; i < 4; i++)
		{
			for(j=curIndex; j<mRem.length; j++)
			{


			}
		}
	}
	worry about static and non-static as well
}
